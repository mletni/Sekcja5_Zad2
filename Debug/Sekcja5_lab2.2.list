
Sekcja5_lab2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016f0  080016f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080016f0  080016f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016f0  080016f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080016f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000070  08001768  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001768  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003356  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f18  00000000  00000000  000233ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d0  00000000  00000000  00024308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  000246d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ad34  00000000  00000000  00024a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000422a  00000000  00000000  0002f744  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003c705  00000000  00000000  0003396e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00070073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b94  00000000  00000000  000700f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016a4 	.word	0x080016a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080016a4 	.word	0x080016a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0c      	ldr	r2, [pc, #48]	; (800033c <SysTick_Config+0x40>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d901      	bls.n	8000312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800030e:	2301      	movs	r3, #1
 8000310:	e010      	b.n	8000334 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SysTick_Config+0x44>)
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	3a01      	subs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800031a:	2301      	movs	r3, #1
 800031c:	425b      	negs	r3, r3
 800031e:	2103      	movs	r1, #3
 8000320:	0018      	movs	r0, r3
 8000322:	f7ff ff7d 	bl	8000220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SysTick_Config+0x44>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SysTick_Config+0x44>)
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000332:	2300      	movs	r3, #0
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fa3c 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f810 	bl	8000370 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config((SystemCoreClock/1000));
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <main+0x28>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	23fa      	movs	r3, #250	; 0xfa
 8000356:	0099      	lsls	r1, r3, #2
 8000358:	0010      	movs	r0, r2
 800035a:	f7ff fed5 	bl	8000108 <__udivsi3>
 800035e:	0003      	movs	r3, r0
 8000360:	0018      	movs	r0, r3
 8000362:	f7ff ffcb 	bl	80002fc <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f84d 	bl	8000404 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036a:	e7fe      	b.n	800036a <main+0x26>
 800036c:	20000064 	.word	0x20000064

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b091      	sub	sp, #68	; 0x44
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	2410      	movs	r4, #16
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	2330      	movs	r3, #48	; 0x30
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f001 f987 	bl	8001694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	2310      	movs	r3, #16
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f001 f980 	bl	8001694 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	0021      	movs	r1, r4
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2202      	movs	r2, #2
 800039a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2201      	movs	r2, #1
 80003a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2210      	movs	r2, #16
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2202      	movs	r2, #2
 80003ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	22a0      	movs	r2, #160	; 0xa0
 80003b8:	0392      	lsls	r2, r2, #14
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fcf3 	bl	8000db0 <HAL_RCC_OscConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ce:	f000 f87d 	bl	80004cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	003b      	movs	r3, r7
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	003b      	movs	r3, r7
 80003da:	2202      	movs	r2, #2
 80003dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	003b      	movs	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ea:	003b      	movs	r3, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fffa 	bl	80013e8 <HAL_RCC_ClockConfig>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003f8:	f000 f868 	bl	80004cc <Error_Handler>
  }
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b011      	add	sp, #68	; 0x44
 8000402:	bd90      	pop	{r4, r7, pc}

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	240c      	movs	r4, #12
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0018      	movs	r0, r3
 8000410:	2314      	movs	r3, #20
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f001 f93d 	bl	8001694 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <MX_GPIO_Init+0xbc>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0289      	lsls	r1, r1, #10
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_GPIO_Init+0xbc>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	029b      	lsls	r3, r3, #10
 8000430:	4013      	ands	r3, r2
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <MX_GPIO_Init+0xbc>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0309      	lsls	r1, r1, #12
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	031b      	lsls	r3, r3, #12
 800044c:	4013      	ands	r3, r2
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000452:	23c0      	movs	r3, #192	; 0xc0
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <MX_GPIO_Init+0xc0>)
 8000458:	2200      	movs	r2, #0
 800045a:	0019      	movs	r1, r3
 800045c:	f000 fc64 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <MX_GPIO_Init+0xc4>)
 800046a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	193a      	adds	r2, r7, r4
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fae4 	bl	8000a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000480:	0021      	movs	r1, r4
 8000482:	187b      	adds	r3, r7, r1
 8000484:	22c0      	movs	r2, #192	; 0xc0
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2201      	movs	r2, #1
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049c:	187b      	adds	r3, r7, r1
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <MX_GPIO_Init+0xc0>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f000 fad0 	bl	8000a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2005      	movs	r0, #5
 80004ae:	f000 fa99 	bl	80009e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004b2:	2005      	movs	r0, #5
 80004b4:	f000 faab 	bl	8000a0e <HAL_NVIC_EnableIRQ>

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b009      	add	sp, #36	; 0x24
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000800 	.word	0x48000800
 80004c8:	10110000 	.word	0x10110000

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	0002      	movs	r2, r0
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <BSP_LED_On+0x30>)
 80004ea:	0092      	lsls	r2, r2, #2
 80004ec:	58d0      	ldr	r0, [r2, r3]
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <BSP_LED_On+0x34>)
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	5ad3      	ldrh	r3, [r2, r3]
 80004f8:	2201      	movs	r2, #1
 80004fa:	0019      	movs	r1, r3
 80004fc:	f000 fc14 	bl	8000d28 <HAL_GPIO_WritePin>
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000
 800050c:	080016dc 	.word	0x080016dc

08000510 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	0002      	movs	r2, r0
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <BSP_LED_Off+0x30>)
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	58d0      	ldr	r0, [r2, r3]
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <BSP_LED_Off+0x34>)
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	5ad3      	ldrh	r3, [r2, r3]
 8000530:	2200      	movs	r2, #0
 8000532:	0019      	movs	r1, r3
 8000534:	f000 fbf8 	bl	8000d28 <HAL_GPIO_WritePin>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	080016dc 	.word	0x080016dc

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x44>)
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_MspInit+0x44>)
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_MspInit+0x44>)
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_MspInit+0x44>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0549      	lsls	r1, r1, #21
 8000570:	430a      	orrs	r2, r1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_MspInit+0x44>)
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	055b      	lsls	r3, r3, #21
 800057c:	4013      	ands	r3, r2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <morse>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void morse(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch(element){
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <morse+0x88>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d016      	beq.n	80005ca <morse+0x3a>
 800059c:	dc02      	bgt.n	80005a4 <morse+0x14>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d005      	beq.n	80005ae <morse+0x1e>
		TimingDelay = 0;
		current_delay = word_gap;
		BSP_LED_Off(LED_GREEN);
		break;
	}
}
 80005a2:	e036      	b.n	8000612 <morse+0x82>
	switch(element){
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d01e      	beq.n	80005e6 <morse+0x56>
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d027      	beq.n	80005fc <morse+0x6c>
}
 80005ac:	e031      	b.n	8000612 <morse+0x82>
		element_switcher = 2;
 80005ae:	4b1b      	ldr	r3, [pc, #108]	; (800061c <morse+0x8c>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
		TimingDelay = 0;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <morse+0x90>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
		current_delay = dot;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <morse+0x94>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <morse+0x98>)
 80005c0:	601a      	str	r2, [r3, #0]
		BSP_LED_On(LED_GREEN);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ff88 	bl	80004d8 <BSP_LED_On>
		break;
 80005c8:	e023      	b.n	8000612 <morse+0x82>
		element_switcher = 2;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <morse+0x8c>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	601a      	str	r2, [r3, #0]
		TimingDelay = 0;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <morse+0x90>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
		current_delay = dash;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <morse+0x9c>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <morse+0x98>)
 80005dc:	601a      	str	r2, [r3, #0]
		BSP_LED_On(LED_GREEN);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff7a 	bl	80004d8 <BSP_LED_On>
		break;
 80005e4:	e015      	b.n	8000612 <morse+0x82>
		TimingDelay = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <morse+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
		current_delay = sign_gap;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <morse+0xa0>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <morse+0x98>)
 80005f2:	601a      	str	r2, [r3, #0]
		BSP_LED_Off(LED_GREEN);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff8b 	bl	8000510 <BSP_LED_Off>
		break;
 80005fa:	e00a      	b.n	8000612 <morse+0x82>
		TimingDelay = 0;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <morse+0x90>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		current_delay = word_gap;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <morse+0xa4>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <morse+0x98>)
 8000608:	601a      	str	r2, [r3, #0]
		BSP_LED_Off(LED_GREEN);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff80 	bl	8000510 <BSP_LED_Off>
		break;
 8000610:	46c0      	nop			; (mov r8, r8)
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000008d 	.word	0x2000008d
 800061c:	20000060 	.word	0x20000060
 8000620:	20000090 	.word	0x20000090
 8000624:	2000004c 	.word	0x2000004c
 8000628:	20000094 	.word	0x20000094
 800062c:	20000050 	.word	0x20000050
 8000630:	20000058 	.word	0x20000058
 8000634:	2000005c 	.word	0x2000005c

08000638 <execute_message>:
void execute_message(){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
		counter = counter + 1;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <execute_message+0x30>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3301      	adds	r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b25a      	sxtb	r2, r3
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <execute_message+0x30>)
 800064c:	701a      	strb	r2, [r3, #0]
		element = sign_table[counter];
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <execute_message+0x30>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b25b      	sxtb	r3, r3
 8000654:	001a      	movs	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <execute_message+0x34>)
 8000658:	5c9a      	ldrb	r2, [r3, r2]
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <execute_message+0x38>)
 800065c:	701a      	strb	r2, [r3, #0]
		morse();
 800065e:	f7ff ff97 	bl	8000590 <morse>
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000048 	.word	0x20000048
 800066c:	20000008 	.word	0x20000008
 8000670:	2000008d 	.word	0x2000008d

08000674 <execute_ele_gap>:
void execute_ele_gap()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	element_switcher = 1;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <execute_ele_gap+0x24>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
	TimingDelay = 0;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <execute_ele_gap+0x28>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
	current_delay = ele_gap;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <execute_ele_gap+0x2c>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <execute_ele_gap+0x30>)
 800068a:	601a      	str	r2, [r3, #0]
	BSP_LED_Off(LED_GREEN);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff3f 	bl	8000510 <BSP_LED_Off>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000060 	.word	0x20000060
 800069c:	20000090 	.word	0x20000090
 80006a0:	20000054 	.word	0x20000054
 80006a4:	20000094 	.word	0x20000094

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(send == 1)
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SysTick_Handler+0x44>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d115      	bne.n	8000704 <SysTick_Handler+0x38>
   {
	   TimingDelay++;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <SysTick_Handler+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <SysTick_Handler+0x48>)
 80006e0:	601a      	str	r2, [r3, #0]
	       if(TimingDelay>=current_delay){
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <SysTick_Handler+0x48>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <SysTick_Handler+0x4c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d30a      	bcc.n	8000704 <SysTick_Handler+0x38>
	       	switch(element_switcher)
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <SysTick_Handler+0x50>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d002      	beq.n	80006fc <SysTick_Handler+0x30>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d002      	beq.n	8000700 <SysTick_Handler+0x34>
 80006fa:	e003      	b.n	8000704 <SysTick_Handler+0x38>
	       			{
	       			case(1):
	       				{
	       					execute_message();
 80006fc:	f7ff ff9c 	bl	8000638 <execute_message>
	       				}
	       			case(2):
	       				{
	       					execute_ele_gap();
 8000700:	f7ff ffb8 	bl	8000674 <execute_ele_gap>
	       }
   }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8a6 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	2000008c 	.word	0x2000008c
 8000714:	20000090 	.word	0x20000090
 8000718:	20000094 	.word	0x20000094
 800071c:	20000060 	.word	0x20000060

08000720 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if(counter>=size_of_msg || counter < 0){
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <EXTI0_1_IRQHandler+0x38>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	001a      	movs	r2, r3
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <EXTI0_1_IRQHandler+0x3c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	da04      	bge.n	800073e <EXTI0_1_IRQHandler+0x1e>
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <EXTI0_1_IRQHandler+0x38>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	da05      	bge.n	800074a <EXTI0_1_IRQHandler+0x2a>
		counter = -1;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <EXTI0_1_IRQHandler+0x38>)
 8000740:	22ff      	movs	r2, #255	; 0xff
 8000742:	701a      	strb	r2, [r3, #0]
		send = 1;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <EXTI0_1_IRQHandler+0x40>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fb0a 	bl	8000d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000048 	.word	0x20000048
 800075c:	20000047 	.word	0x20000047
 8000760:	2000008c 	.word	0x2000008c

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800079a:	f7ff ffe3 	bl	8000764 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800079e:	f000 ff55 	bl	800164c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fdcf 	bl	8000344 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b4:	080016f8 	.word	0x080016f8
  ldr r2, =_sbss
 80007b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007bc:	2000009c 	.word	0x2000009c

080007c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_IRQHandler>
	...

080007c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <HAL_Init+0x24>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_Init+0x24>)
 80007ce:	2110      	movs	r1, #16
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f809 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007da:	f7ff feb5 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_InitTick+0x5c>)
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_InitTick+0x60>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0019      	movs	r1, r3
 80007fe:	23fa      	movs	r3, #250	; 0xfa
 8000800:	0098      	lsls	r0, r3, #2
 8000802:	f7ff fc81 	bl	8000108 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	0019      	movs	r1, r3
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff fc7c 	bl	8000108 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f90b 	bl	8000a2e <HAL_SYSTICK_Config>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e00f      	b.n	8000840 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b03      	cmp	r3, #3
 8000824:	d80b      	bhi.n	800083e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2301      	movs	r3, #1
 800082a:	425b      	negs	r3, r3
 800082c:	2200      	movs	r2, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8d8 	bl	80009e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_InitTick+0x64>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b003      	add	sp, #12
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	20000064 	.word	0x20000064
 800084c:	2000006c 	.word	0x2000006c
 8000850:	20000068 	.word	0x20000068

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	2000006c 	.word	0x2000006c
 8000874:	20000098 	.word	0x20000098

08000878 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000098 	.word	0x20000098

0800088c <__NVIC_EnableIRQ>:
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b7f      	cmp	r3, #127	; 0x7f
 800089e:	d809      	bhi.n	80008b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	001a      	movs	r2, r3
 80008a6:	231f      	movs	r3, #31
 80008a8:	401a      	ands	r2, r3
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_EnableIRQ+0x30>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	4091      	lsls	r1, r2
 80008b0:	000a      	movs	r2, r1
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	0002      	movs	r2, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b7f      	cmp	r3, #127	; 0x7f
 80008d4:	d828      	bhi.n	8000928 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d6:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <__NVIC_SetPriority+0xd4>)
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	33c0      	adds	r3, #192	; 0xc0
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	589b      	ldr	r3, [r3, r2]
 80008e6:	1dfa      	adds	r2, r7, #7
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	0011      	movs	r1, r2
 80008ec:	2203      	movs	r2, #3
 80008ee:	400a      	ands	r2, r1
 80008f0:	00d2      	lsls	r2, r2, #3
 80008f2:	21ff      	movs	r1, #255	; 0xff
 80008f4:	4091      	lsls	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	401a      	ands	r2, r3
 80008fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	22ff      	movs	r2, #255	; 0xff
 8000904:	401a      	ands	r2, r3
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	0018      	movs	r0, r3
 800090c:	2303      	movs	r3, #3
 800090e:	4003      	ands	r3, r0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000914:	481f      	ldr	r0, [pc, #124]	; (8000994 <__NVIC_SetPriority+0xd4>)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	33c0      	adds	r3, #192	; 0xc0
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	501a      	str	r2, [r3, r0]
}
 8000926:	e031      	b.n	800098c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	0019      	movs	r1, r3
 8000930:	230f      	movs	r3, #15
 8000932:	400b      	ands	r3, r1
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	3306      	adds	r3, #6
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	3304      	adds	r3, #4
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1dfa      	adds	r2, r7, #7
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	0011      	movs	r1, r2
 8000948:	2203      	movs	r2, #3
 800094a:	400a      	ands	r2, r1
 800094c:	00d2      	lsls	r2, r2, #3
 800094e:	21ff      	movs	r1, #255	; 0xff
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	019b      	lsls	r3, r3, #6
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	401a      	ands	r2, r3
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	2303      	movs	r3, #3
 800096a:	4003      	ands	r3, r0
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <__NVIC_SetPriority+0xd8>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	001c      	movs	r4, r3
 8000978:	230f      	movs	r3, #15
 800097a:	4023      	ands	r3, r4
 800097c:	3b08      	subs	r3, #8
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	430a      	orrs	r2, r1
 8000982:	3306      	adds	r3, #6
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	18c3      	adds	r3, r0, r3
 8000988:	3304      	adds	r3, #4
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b003      	add	sp, #12
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <SysTick_Config>:
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <SysTick_Config+0x40>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d901      	bls.n	80009b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e010      	b.n	80009d4 <SysTick_Config+0x38>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <SysTick_Config+0x44>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	3a01      	subs	r2, #1
 80009b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	2103      	movs	r1, #3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff7d 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SysTick_Config+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x44>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	00ffffff 	.word	0x00ffffff
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	210f      	movs	r1, #15
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	1c02      	adds	r2, r0, #0
 80009f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	0002      	movs	r2, r0
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ff33 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ffaf 	bl	800099c <SysTick_Config>
 8000a3e:	0003      	movs	r3, r0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e14f      	b.n	8000cf8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <HAL_GPIO_Init+0x28>
 8000a6e:	e140      	b.n	8000cf2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x38>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b12      	cmp	r3, #18
 8000a7e:	d123      	bne.n	8000ac8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	58d3      	ldr	r3, [r2, r3]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2207      	movs	r2, #7
 8000a92:	4013      	ands	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	220f      	movs	r2, #15
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2107      	movs	r1, #7
 8000aac:	400b      	ands	r3, r1
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	6939      	ldr	r1, [r7, #16]
 8000ac6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	409a      	lsls	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d00b      	beq.n	8000b1c <HAL_GPIO_Init+0xd4>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	2b11      	cmp	r3, #17
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b12      	cmp	r3, #18
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	2201      	movs	r2, #1
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	055b      	lsls	r3, r3, #21
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d100      	bne.n	8000bbc <HAL_GPIO_Init+0x174>
 8000bba:	e09a      	b.n	8000cf2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	619a      	str	r2, [r3, #24]
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4013      	ands	r3, r2
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	589b      	ldr	r3, [r3, r2]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2203      	movs	r2, #3
 8000be6:	4013      	ands	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d013      	beq.n	8000c2a <HAL_GPIO_Init+0x1e2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d00d      	beq.n	8000c26 <HAL_GPIO_Init+0x1de>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <HAL_GPIO_Init+0x2d4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d007      	beq.n	8000c22 <HAL_GPIO_Init+0x1da>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a42      	ldr	r2, [pc, #264]	; (8000d20 <HAL_GPIO_Init+0x2d8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_GPIO_Init+0x1d6>
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c1e:	2305      	movs	r3, #5
 8000c20:	e004      	b.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e002      	b.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	2103      	movs	r1, #3
 8000c30:	400a      	ands	r2, r1
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	4093      	lsls	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3c:	4935      	ldr	r1, [pc, #212]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	025b      	lsls	r3, r3, #9
 8000c62:	4013      	ands	r3, r2
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	029b      	lsls	r3, r3, #10
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	035b      	lsls	r3, r3, #13
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43da      	mvns	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	039b      	lsls	r3, r3, #14
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	1e13      	subs	r3, r2, #0
 8000d02:	d000      	beq.n	8000d06 <HAL_GPIO_Init+0x2be>
 8000d04:	e6a8      	b.n	8000a58 <HAL_GPIO_Init+0x10>
  } 
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b006      	add	sp, #24
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	0008      	movs	r0, r1
 8000d32:	0011      	movs	r1, r2
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	1c02      	adds	r2, r0, #0
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	1c7b      	adds	r3, r7, #1
 8000d3c:	1c0a      	adds	r2, r1, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d40:	1c7b      	adds	r3, r7, #1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d004      	beq.n	8000d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d48:	1cbb      	adds	r3, r7, #2
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e003      	b.n	8000d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	1cbb      	adds	r3, r7, #2
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1dbb      	adds	r3, r7, #6
 8000d6e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	1dba      	adds	r2, r7, #6
 8000d76:	8812      	ldrh	r2, [r2, #0]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d008      	beq.n	8000d8e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d7e:	1dba      	adds	r2, r7, #6
 8000d80:	8812      	ldrh	r2, [r2, #0]
 8000d82:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 f807 	bl	8000d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	1dbb      	adds	r3, r7, #6
 8000da6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e303      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d100      	bne.n	8000dce <HAL_RCC_OscConfig+0x1e>
 8000dcc:	e08d      	b.n	8000eea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dce:	4bc4      	ldr	r3, [pc, #784]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d00e      	beq.n	8000df8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dda:	4bc1      	ldr	r3, [pc, #772]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	220c      	movs	r2, #12
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d116      	bne.n	8000e14 <HAL_RCC_OscConfig+0x64>
 8000de6:	4bbe      	ldr	r3, [pc, #760]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	401a      	ands	r2, r3
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10d      	bne.n	8000e14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	4bb9      	ldr	r3, [pc, #740]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	d100      	bne.n	8000e06 <HAL_RCC_OscConfig+0x56>
 8000e04:	e070      	b.n	8000ee8 <HAL_RCC_OscConfig+0x138>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d000      	beq.n	8000e10 <HAL_RCC_OscConfig+0x60>
 8000e0e:	e06b      	b.n	8000ee8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e2da      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d107      	bne.n	8000e2c <HAL_RCC_OscConfig+0x7c>
 8000e1c:	4bb0      	ldr	r3, [pc, #704]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4baf      	ldr	r3, [pc, #700]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e02f      	b.n	8000e8c <HAL_RCC_OscConfig+0xdc>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x9e>
 8000e34:	4baa      	ldr	r3, [pc, #680]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba9      	ldr	r3, [pc, #676]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	49aa      	ldr	r1, [pc, #680]	; (80010e4 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	4ba7      	ldr	r3, [pc, #668]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4ba6      	ldr	r3, [pc, #664]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e46:	49a8      	ldr	r1, [pc, #672]	; (80010e8 <HAL_RCC_OscConfig+0x338>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e01e      	b.n	8000e8c <HAL_RCC_OscConfig+0xdc>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d10e      	bne.n	8000e74 <HAL_RCC_OscConfig+0xc4>
 8000e56:	4ba2      	ldr	r3, [pc, #648]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4ba1      	ldr	r3, [pc, #644]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	02c9      	lsls	r1, r1, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b9d      	ldr	r3, [pc, #628]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xdc>
 8000e74:	4b9a      	ldr	r3, [pc, #616]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	499a      	ldr	r1, [pc, #616]	; (80010e4 <HAL_RCC_OscConfig+0x334>)
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	4b97      	ldr	r3, [pc, #604]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b96      	ldr	r3, [pc, #600]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000e86:	4998      	ldr	r1, [pc, #608]	; (80010e8 <HAL_RCC_OscConfig+0x338>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d014      	beq.n	8000ebe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcf0 	bl	8000878 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fceb 	bl	8000878 <HAL_GetTick>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e28c      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb0:	4b8b      	ldr	r3, [pc, #556]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0xee>
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fcdb 	bl	8000878 <HAL_GetTick>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcd6 	bl	8000878 <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e277      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b81      	ldr	r3, [pc, #516]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x118>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x146>
 8000ef4:	e069      	b.n	8000fca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef6:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	220c      	movs	r2, #12
 8000efc:	4013      	ands	r3, r2
 8000efe:	d00b      	beq.n	8000f18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f00:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	220c      	movs	r2, #12
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d11c      	bne.n	8000f46 <HAL_RCC_OscConfig+0x196>
 8000f0c:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	4013      	ands	r3, r2
 8000f16:	d116      	bne.n	8000f46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f18:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x17e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e24d      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	22f8      	movs	r2, #248	; 0xf8
 8000f34:	4393      	bics	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	00da      	lsls	r2, r3, #3
 8000f3e:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f44:	e041      	b.n	8000fca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d024      	beq.n	8000f98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4e:	4b64      	ldr	r3, [pc, #400]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fc8d 	bl	8000878 <HAL_GetTick>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc88 	bl	8000878 <HAL_GetTick>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e229      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f76:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d0f1      	beq.n	8000f64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	22f8      	movs	r2, #248	; 0xf8
 8000f86:	4393      	bics	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	00da      	lsls	r2, r3, #3
 8000f90:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e018      	b.n	8000fca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f98:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc68 	bl	8000878 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc63 	bl	8000878 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e204      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d1f1      	bne.n	8000fae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d036      	beq.n	8001042 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d019      	beq.n	8001010 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fdc:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fc46 	bl	8000878 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fc41 	bl	8000878 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1e2      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2202      	movs	r2, #2
 800100a:	4013      	ands	r3, r2
 800100c:	d0f1      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x242>
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001016:	2101      	movs	r1, #1
 8001018:	438a      	bics	r2, r1
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fc2c 	bl	8000878 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fc27 	bl	8000878 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1c8      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d1f1      	bne.n	8001026 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	d100      	bne.n	800104e <HAL_RCC_OscConfig+0x29e>
 800104c:	e0b6      	b.n	80011bc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	231f      	movs	r3, #31
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	055b      	lsls	r3, r3, #21
 800105e:	4013      	ands	r3, r2
 8001060:	d111      	bne.n	8001086 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0549      	lsls	r1, r1, #21
 800106c:	430a      	orrs	r2, r1
 800106e:	61da      	str	r2, [r3, #28]
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 8001072:	69da      	ldr	r2, [r3, #28]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	055b      	lsls	r3, r3, #21
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800107e:	231f      	movs	r3, #31
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d11a      	bne.n	80010c8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0049      	lsls	r1, r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fbea 	bl	8000878 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010aa:	f7ff fbe5 	bl	8000878 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e186      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_RCC_OscConfig+0x33c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10f      	bne.n	80010f0 <HAL_RCC_OscConfig+0x340>
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <HAL_RCC_OscConfig+0x330>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	e036      	b.n	800114c <HAL_RCC_OscConfig+0x39c>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	40021000 	.word	0x40021000
 80010e4:	fffeffff 	.word	0xfffeffff
 80010e8:	fffbffff 	.word	0xfffbffff
 80010ec:	40007000 	.word	0x40007000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x362>
 80010f8:	4bb6      	ldr	r3, [pc, #728]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4bb5      	ldr	r3, [pc, #724]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80010fe:	2101      	movs	r1, #1
 8001100:	438a      	bics	r2, r1
 8001102:	621a      	str	r2, [r3, #32]
 8001104:	4bb3      	ldr	r3, [pc, #716]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	4bb2      	ldr	r3, [pc, #712]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800110a:	2104      	movs	r1, #4
 800110c:	438a      	bics	r2, r1
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x39c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x384>
 800111a:	4bae      	ldr	r3, [pc, #696]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	4bad      	ldr	r3, [pc, #692]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001120:	2104      	movs	r1, #4
 8001122:	430a      	orrs	r2, r1
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	4bab      	ldr	r3, [pc, #684]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001128:	6a1a      	ldr	r2, [r3, #32]
 800112a:	4baa      	ldr	r3, [pc, #680]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	621a      	str	r2, [r3, #32]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0x39c>
 8001134:	4ba7      	ldr	r3, [pc, #668]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800113a:	2101      	movs	r1, #1
 800113c:	438a      	bics	r2, r1
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	4ba4      	ldr	r3, [pc, #656]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001146:	2104      	movs	r1, #4
 8001148:	438a      	bics	r2, r1
 800114a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d014      	beq.n	800117e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fb90 	bl	8000878 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	e009      	b.n	8001172 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fb8b 	bl	8000878 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	4a9b      	ldr	r2, [pc, #620]	; (80013d8 <HAL_RCC_OscConfig+0x628>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e12b      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001172:	4b98      	ldr	r3, [pc, #608]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x3ae>
 800117c:	e013      	b.n	80011a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb7b 	bl	8000878 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001186:	e009      	b.n	800119c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001188:	f7ff fb76 	bl	8000878 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a91      	ldr	r2, [pc, #580]	; (80013d8 <HAL_RCC_OscConfig+0x628>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e116      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119c:	4b8d      	ldr	r3, [pc, #564]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	2202      	movs	r2, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011a6:	231f      	movs	r3, #31
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011b2:	69da      	ldr	r2, [r3, #28]
 80011b4:	4b87      	ldr	r3, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011b6:	4989      	ldr	r1, [pc, #548]	; (80013dc <HAL_RCC_OscConfig+0x62c>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2210      	movs	r2, #16
 80011c2:	4013      	ands	r3, r2
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d12a      	bne.n	8001224 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d2:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011d4:	2104      	movs	r1, #4
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011da:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb47 	bl	8000878 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011f0:	f7ff fb42 	bl	8000878 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0e3      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d0f1      	beq.n	80011f0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800120c:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	22f8      	movs	r2, #248	; 0xf8
 8001212:	4393      	bics	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	00da      	lsls	r2, r3, #3
 800121c:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800121e:	430a      	orrs	r2, r1
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
 8001222:	e034      	b.n	800128e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	3305      	adds	r3, #5
 800122a:	d111      	bne.n	8001250 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001232:	2104      	movs	r1, #4
 8001234:	438a      	bics	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001238:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	22f8      	movs	r2, #248	; 0xf8
 800123e:	4393      	bics	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	00da      	lsls	r2, r3, #3
 8001248:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800124a:	430a      	orrs	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
 800124e:	e01e      	b.n	800128e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001250:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001254:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001256:	2104      	movs	r1, #4
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800125c:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800125e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001260:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001262:	2101      	movs	r1, #1
 8001264:	438a      	bics	r2, r1
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fb06 	bl	8000878 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001272:	f7ff fb01 	bl	8000878 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e0a2      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d1f1      	bne.n	8001272 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x4e8>
 8001296:	e097      	b.n	80013c8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	220c      	movs	r2, #12
 800129e:	4013      	ands	r3, r2
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x4f6>
 80012a4:	e06b      	b.n	800137e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d14c      	bne.n	8001348 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012b4:	494a      	ldr	r1, [pc, #296]	; (80013e0 <HAL_RCC_OscConfig+0x630>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fadd 	bl	8000878 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fad8 	bl	8000878 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e079      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	049b      	lsls	r3, r3, #18
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	220f      	movs	r2, #15
 80012e8:	4393      	bics	r3, r2
 80012ea:	0019      	movs	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_RCC_OscConfig+0x634>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	431a      	orrs	r2, r3
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0449      	lsls	r1, r1, #17
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff faab 	bl	8000878 <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff faa6 	bl	8000878 <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e047      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	049b      	lsls	r3, r3, #18
 8001342:	4013      	ands	r3, r2
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x578>
 8001346:	e03f      	b.n	80013c8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800134e:	4924      	ldr	r1, [pc, #144]	; (80013e0 <HAL_RCC_OscConfig+0x630>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fa90 	bl	8000878 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff fa8b 	bl	8000878 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e02c      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	049b      	lsls	r3, r3, #18
 8001378:	4013      	ands	r3, r2
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x5ae>
 800137c:	e024      	b.n	80013c8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e01f      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_RCC_OscConfig+0x624>)
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10e      	bne.n	80013c4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	220f      	movs	r2, #15
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	23f0      	movs	r3, #240	; 0xf0
 80013b8:	039b      	lsls	r3, r3, #14
 80013ba:	401a      	ands	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b008      	add	sp, #32
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40021000 	.word	0x40021000
 80013d8:	00001388 	.word	0x00001388
 80013dc:	efffffff 	.word	0xefffffff
 80013e0:	feffffff 	.word	0xfeffffff
 80013e4:	ffc2ffff 	.word	0xffc2ffff

080013e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0b3      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d911      	bls.n	800142e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2201      	movs	r2, #1
 8001422:	4013      	ands	r3, r2
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d001      	beq.n	800142e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e09a      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d015      	beq.n	8001464 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2204      	movs	r2, #4
 800143e:	4013      	ands	r3, r2
 8001440:	d006      	beq.n	8001450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001448:	21e0      	movs	r1, #224	; 0xe0
 800144a:	00c9      	lsls	r1, r1, #3
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	22f0      	movs	r2, #240	; 0xf0
 8001456:	4393      	bics	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	d040      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	4013      	ands	r3, r2
 8001480:	d114      	bne.n	80014ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06e      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	049b      	lsls	r3, r3, #18
 8001496:	4013      	ands	r3, r2
 8001498:	d108      	bne.n	80014ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e062      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e05b      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	4393      	bics	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff f9da 	bl	8000878 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c8:	e009      	b.n	80014de <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ca:	f7ff f9d5 	bl	8000878 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <HAL_RCC_ClockConfig+0x18c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e042      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	220c      	movs	r2, #12
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1ec      	bne.n	80014ca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d211      	bcs.n	8001522 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x184>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e020      	b.n	8001564 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2204      	movs	r2, #4
 8001528:	4013      	ands	r3, r2
 800152a:	d009      	beq.n	8001540 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_RCC_ClockConfig+0x190>)
 8001532:	4013      	ands	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001540:	f000 f820 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8001544:	0001      	movs	r1, r0
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x188>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	220f      	movs	r2, #15
 800154e:	4013      	ands	r3, r2
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_RCC_ClockConfig+0x194>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	000a      	movs	r2, r1
 8001556:	40da      	lsrs	r2, r3
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_ClockConfig+0x198>)
 800155a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff f945 	bl	80007ec <HAL_InitTick>
  
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40022000 	.word	0x40022000
 8001570:	40021000 	.word	0x40021000
 8001574:	00001388 	.word	0x00001388
 8001578:	fffff8ff 	.word	0xfffff8ff
 800157c:	080016e0 	.word	0x080016e0
 8001580:	20000064 	.word	0x20000064

08001584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08f      	sub	sp, #60	; 0x3c
 8001588:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800158a:	2314      	movs	r3, #20
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	4a2b      	ldr	r2, [pc, #172]	; (800163c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001590:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001592:	c313      	stmia	r3!, {r0, r1, r4}
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800159c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800159e:	c313      	stmia	r3!, {r0, r1, r4}
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	220c      	movs	r2, #12
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d002      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x4a>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d003      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x50>
 80015cc:	e02d      	b.n	800162a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015d2:	e02d      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	2214      	movs	r2, #20
 80015de:	18ba      	adds	r2, r7, r2
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	220f      	movs	r2, #15
 80015ea:	4013      	ands	r3, r2
 80015ec:	1d3a      	adds	r2, r7, #4
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	4013      	ands	r3, r2
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001600:	f7fe fd82 	bl	8000108 <__udivsi3>
 8001604:	0003      	movs	r3, r0
 8001606:	001a      	movs	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	4353      	muls	r3, r2
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
 800160e:	e009      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001612:	000a      	movs	r2, r1
 8001614:	0152      	lsls	r2, r2, #5
 8001616:	1a52      	subs	r2, r2, r1
 8001618:	0193      	lsls	r3, r2, #6
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	185b      	adds	r3, r3, r1
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001628:	e002      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_RCC_GetSysClockFreq+0xc4>)
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800162e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001632:	0018      	movs	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	b00f      	add	sp, #60	; 0x3c
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	080016bc 	.word	0x080016bc
 8001640:	080016cc 	.word	0x080016cc
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200

0800164c <__libc_init_array>:
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	2600      	movs	r6, #0
 8001650:	4d0c      	ldr	r5, [pc, #48]	; (8001684 <__libc_init_array+0x38>)
 8001652:	4c0d      	ldr	r4, [pc, #52]	; (8001688 <__libc_init_array+0x3c>)
 8001654:	1b64      	subs	r4, r4, r5
 8001656:	10a4      	asrs	r4, r4, #2
 8001658:	42a6      	cmp	r6, r4
 800165a:	d109      	bne.n	8001670 <__libc_init_array+0x24>
 800165c:	2600      	movs	r6, #0
 800165e:	f000 f821 	bl	80016a4 <_init>
 8001662:	4d0a      	ldr	r5, [pc, #40]	; (800168c <__libc_init_array+0x40>)
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <__libc_init_array+0x44>)
 8001666:	1b64      	subs	r4, r4, r5
 8001668:	10a4      	asrs	r4, r4, #2
 800166a:	42a6      	cmp	r6, r4
 800166c:	d105      	bne.n	800167a <__libc_init_array+0x2e>
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	00b3      	lsls	r3, r6, #2
 8001672:	58eb      	ldr	r3, [r5, r3]
 8001674:	4798      	blx	r3
 8001676:	3601      	adds	r6, #1
 8001678:	e7ee      	b.n	8001658 <__libc_init_array+0xc>
 800167a:	00b3      	lsls	r3, r6, #2
 800167c:	58eb      	ldr	r3, [r5, r3]
 800167e:	4798      	blx	r3
 8001680:	3601      	adds	r6, #1
 8001682:	e7f2      	b.n	800166a <__libc_init_array+0x1e>
 8001684:	080016f0 	.word	0x080016f0
 8001688:	080016f0 	.word	0x080016f0
 800168c:	080016f0 	.word	0x080016f0
 8001690:	080016f4 	.word	0x080016f4

08001694 <memset>:
 8001694:	0003      	movs	r3, r0
 8001696:	1812      	adds	r2, r2, r0
 8001698:	4293      	cmp	r3, r2
 800169a:	d100      	bne.n	800169e <memset+0xa>
 800169c:	4770      	bx	lr
 800169e:	7019      	strb	r1, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	e7f9      	b.n	8001698 <memset+0x4>

080016a4 <_init>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr

080016b0 <_fini>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr
